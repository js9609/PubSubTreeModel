/*
 * main.cpp
 *
 *  Created on: Nov 14, 2018
 *      Author: jinbro
 */

#include <iostream>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/epoll.h>
#include <netinet/in.h>

#include "json/json.h"
#include <string>
#include <string.h>
#include <vector>
#include "Subscriber.h"
using namespace std;


//Function 선언문
void error_handling(string msg); //Error Handling
bool isDependent(Subscriber *child, Subscriber *parent);
bool findParent(Subscriber *child, Subscriber *parent);
bool contains(string subscription_child, string subscription_parent);
/******************/

//Define 정의
#define EPOLL_SIZE 256
#define BUF_SIZE 100
vector<Subscriber*> vector_root;
//***************/

//전역변수
//
int main(int argc, char *argv[]) {

	if (argc != 2) {
		printf("Usage : %s <port> \n", argv[0]);
		exit(1);
	}
	/** 서버 생성 **/
	struct sockaddr_in serv_addr, clnt_addr;
	socklen_t addr_size;
	int serv_sock = socket(PF_INET, SOCK_STREAM, 0);
	memset(&serv_addr, 0, sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	serv_addr.sin_port = htons(atoi(argv[1]));
	if (bind(serv_sock, (struct sockaddr*) &serv_addr, sizeof(serv_addr)) == -1)
		error_handling("bind() error");
	if (listen(serv_sock, 5) == -1)
		error_handling("listen() error");
	/**/

	//epoll
	struct epoll_event* ep_events;
	struct epoll_event event;
	int epfd, event_cnt;
	/**/
	epfd = epoll_create(EPOLL_SIZE);
	ep_events = (struct epoll_event*) malloc(
			sizeof(struct epoll_event) * EPOLL_SIZE);
	//이벤트 처리에 서버 소켓 추가
	event.events = EPOLLIN;
	event.data.fd = serv_sock;
	epoll_ctl(epfd, EPOLL_CTL_ADD, serv_sock, &event);

	while (1) {
		event_cnt = epoll_wait(epfd, ep_events, EPOLL_SIZE, -1);
		if (event_cnt == -1) {
			puts("epoll wait() error");
			break;
		}
		for (int idx = 0; idx < event_cnt; idx++) {
			//서버 소켓으로 들어온 신호 -- 연결 (Client.connect)
			if (ep_events[idx].data.fd == serv_sock) {
				addr_size = sizeof(clnt_addr);
				int clnt_sock = accept(serv_sock, (struct sockaddr*) &clnt_addr,
						&addr_size);
				event.events = EPOLLIN;
				event.data.fd = clnt_sock;
				epoll_ctl(epfd, EPOLL_CTL_ADD, clnt_sock, &event);
				printf("connected client : %d\n", clnt_sock);
			} else {

			}

		}

	}

}



//DFS 서치 //TODO
bool findParent(Subscriber *child, Subscriber *parent) {
	for(int cdx = 0 ; cdx < parent->getNumOfChilds(); cdx++){
		if(isDependent(child, parent->getChild(cdx))){
			if(findParent(child, parent->getChild(cdx))){
				return true;
			}
		}
		else if(isDependent(parent->getChild(cdx), child)){
			Subscriber* tmp = parent->getChild(cdx);
			parent->getChild(cdx) = child;
			child->addChild(tmp);
			return true;
		}else
		{}
	}
	return false;
}
//Subscription이 종속관계에 있는지 파악
bool isDependent(Subscriber *child, Subscriber *parent) {
		return contains(child->getSubscription(), parent->getSubscription());
}

//TODO
bool contains(string subscription_child, string subscription_parent) {
	return true;
}

void error_handling(string msg) {
	cout << msg << endl;
	exit(1);

}

//안쓸거 같은것둘

