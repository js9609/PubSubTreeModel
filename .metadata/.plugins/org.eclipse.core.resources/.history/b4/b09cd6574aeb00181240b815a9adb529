/*
 * Subscriber.cpp
 *
 *  Created on: Nov 14, 2018
 *      Author: jinbro
 */
#include <iostream>
#include <algorithm>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/epoll.h>
#include <netinet/in.h>
#include "json/json.h"
#include <string>
#include <string.h>
#include <vector>
#include <fstream>

using namespace std;

//함수 정의
void sendToSub(int sock_fd);
int getChildPort(string buf, int pos);
int returnPort(string buf);
void error_handling(string msg);
int getChildNum(string buf);
struct sockaddr_in* returnSockAddr(int port);

bool checkFile(string file_name, vector<string> my_attributes);
bool filter(vector<string> my_attributes, vector<string> file_attributes);
//전역변수 정의
#define EPOLL_SIZE 256
#define BUF_SIZE 100
#define FILE_BUF_SIZE 30
int main(int argc, char *argv[]) {

	FILE *fp;
	char filebuf[FILE_BUF_SIZE];
	int read_cnt;

	vector<int> childsockets;
	struct epoll_event *ep_events;
	struct epoll_event event;
	int epfd, event_cnt;

	vector<string> my_attributes;
	Json::Value info;
	Json::Value attrarr;
	int attrnum;
	string atr;
	cout << "HOW MANY ATTRIBUTES? : ";
	cin >> attrnum;
	for (int idx = 0; idx < attrnum; idx++) {
		cin >> atr;
		my_attributes.push_back(atr);
		attrarr.append(atr);
	}
	info["attr"] = attrarr;
	info["type"] = "sub";
	info["port"] = atoi(argv[3]);
	Json::FastWriter writer;
	string attr = writer.write(info);
	cout << attr << endl;
	const char *buf = attr.c_str();

	char char_port[BUF_SIZE];
	int str_len;
	int main_serv_sock, my_serv_sock;

	struct sockaddr_in* main_serv_addr;
	struct sockaddr_in* my_serv_addr;

	socklen_t addr_size;

	if (argc != 4) {
		printf("Usage : %s <IP> <port> <myPort>\n", argv[0]);
		exit(1);
	}

	//Create Epoll
	epfd = epoll_create(EPOLL_SIZE);
	ep_events = (struct epoll_event*) malloc(
			sizeof(struct epoll_event) * EPOLL_SIZE);

	//For Connection To the Main Server - Initializing
	main_serv_sock = socket(PF_INET, SOCK_STREAM, 0);
	main_serv_addr = returnSockAddr(atoi(argv[2]));
	event.events = EPOLLIN;
	event.data.fd = main_serv_sock;
	epoll_ctl(epfd, EPOLL_CTL_ADD, main_serv_sock, &event);

	//Connect to the main Server
	if (connect(main_serv_sock, (struct sockaddr*) main_serv_addr,
			sizeof(*main_serv_addr)) == -1)
		error_handling("connect() error!");
	str_len = write(main_serv_sock, buf, BUF_SIZE);
	fp = fopen("receive.json", "w");
	my_serv_sock = socket(PF_INET, SOCK_STREAM, 0);
	my_serv_addr = returnSockAddr(atoi(argv[3]));
	int enable = 1;
	if (setsockopt(my_serv_sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(int))
			< 0)
		error_handling("setsockopt(SO_REUSEADDR) failed");
	if (bind(my_serv_sock, (struct sockaddr*) my_serv_addr,
			sizeof(*my_serv_addr)) == -1)
		error_handling("bind() error");
	if (listen(my_serv_sock, 5) == -1)
		error_handling("listen() error");
	//Add my_server socket to epoll
	event.events = EPOLLIN;
	event.data.fd = my_serv_sock;
	epoll_ctl(epfd, EPOLL_CTL_ADD, my_serv_sock, &event);

	while (1) {
		char buf[BUF_SIZE];
		int parent_sock;
		event_cnt = epoll_wait(epfd, ep_events, EPOLL_SIZE, -1);
		if (event_cnt == -1) {
			puts("epoll wait() error");
		}

		for (int i = 0; i < event_cnt; i++) {
			int clnt_sock = ep_events[i].data.fd;
			//서버로부터 자식들에 대한 정보를 받고 연결
			if (clnt_sock == main_serv_sock) {
				int strlen = read(ep_events[i].data.fd, buf, BUF_SIZE);
				if (strlen != 0) {
					childsockets.clear();
					for (int idx = 0; idx < getChildNum(buf); idx++) {
						int child_serv_sock = socket(PF_INET, SOCK_STREAM, 0);
						struct sockaddr_in* child_serv_addr = returnSockAddr(
								getChildPort(buf, idx));
						cout << getChildPort(buf, idx) << endl;
						event.events = EPOLLIN;
						event.data.fd = child_serv_sock;
						epoll_ctl(epfd, EPOLL_CTL_ADD, child_serv_sock, &event);
						//Connect to child Server
						if (connect(child_serv_sock,
								(struct sockaddr*) child_serv_addr,
								sizeof(*child_serv_addr)) == -1)
							error_handling("connect() error!");
						childsockets.push_back(child_serv_sock);
					}
				} else
					break;
			}
			//Parent가 생기고 연결되면 실행됨
			else if (clnt_sock == my_serv_sock) {

				int strlen = read(ep_events[i].data.fd, buf, BUF_SIZE);
				struct sockaddr_in clnt_addr;
				parent_sock = accept(my_serv_sock,
						(struct sockaddr*) &clnt_addr, &addr_size);
				event.events = EPOLLIN;
				event.data.fd = parent_sock;
				epoll_ctl(epfd, EPOLL_CTL_ADD, parent_sock, &event);
				cout << "Parent Connected : " << parent_sock << endl;
			}
			//Parent로부터 메세지가 날라오면 오는 공간
			else if (clnt_sock == parent_sock) {
				read_cnt = read(parent_sock, filebuf, FILE_BUF_SIZE);
				if (read_cnt > 0) {
					cout << "RECEIVING DATA..." << endl;
					while (1) {
						cout << filebuf;
						fwrite((void*) filebuf, 1, read_cnt, fp);
						if (read_cnt != FILE_BUF_SIZE)
							break;
						read_cnt = read(parent_sock, filebuf, FILE_BUF_SIZE);
					}
					cout << endl;
					cout << "RECEIVED DATA!" << endl;
					fclose(fp);

					/*if (checkFile("receive.json", my_attributes)) {

					 }*/
					for (int idx = 0; idx < childsockets.size(); idx++) {
						sendToSub(childsockets.at(idx));
					}

				} else {
					cout << "parent disconnected " << endl;
					epoll_ctl(epfd, EPOLL_CTL_DEL, parent_sock, &event);
					close(parent_sock);
				}
			}
			//FROM CHILD
			else { // from child

				//read(childsockets.at(0), buf, BUF_SIZE);
				//printf("Message from client: %s \n", buf);
			}
		}
	}
	close(main_serv_sock);
	close(my_serv_sock);
	return 0;
}

void sendToSub(int sock_fd) {
	FILE * fp;
	char buf[BUF_SIZE];
	char filebuf[FILE_BUF_SIZE];
	int read_cnt;
	fp = fopen("receive.json", "rb");
	while (1) {
		read_cnt = fread((void*) filebuf, 1, FILE_BUF_SIZE, fp);
		if (read_cnt < FILE_BUF_SIZE) {
			filebuf[read_cnt] = EOF;
			write(sock_fd, filebuf, read_cnt);
			break;
		}
		write(sock_fd, filebuf, FILE_BUF_SIZE);
	}
	fclose(fp);
}

bool checkFile(string file_name, vector<string> my_attributes) {
	Json::Value root;
	Json::Reader reader;
	ifstream file(file_name);
	reader.parse(file, root);

	vector<string> file_attributes;
	Json::Value attrarr;
	;
	attrarr = root["attr"];
	for (int idx = 0; idx < attrarr.size(); idx++) {
		file_attributes.push_back(attrarr[idx].asString());
	}
	return filter(my_attributes, file_attributes);
}

bool filter(vector<string> my_attributes, vector<string> file_attributes) {
	for (int cdx = 0; cdx < my_attributes.size(); cdx++) {
		if (find(file_attributes.begin(), file_attributes.end(),
				my_attributes.at(cdx)) == file_attributes.end()) {
			return false;
		}
	}
	return true;
}

struct sockaddr_in* returnSockAddr(int port) {
	struct sockaddr_in* sockaddr = (struct sockaddr_in*) malloc(
			sizeof(sockaddr_in));
	memset(sockaddr, 0, sizeof(*sockaddr));
	sockaddr->sin_family = AF_INET;
	sockaddr->sin_addr.s_addr = htonl(INADDR_ANY);
	sockaddr->sin_port = htons(port);
	return sockaddr;
}

void returnChildInfo(string buf) {

}
int returnPort(string buf) {
	Json::Value attrbuf;
	Json::Value attr;
	Json::Reader reader;
	reader.parse(buf, attrbuf);
	attr = attrbuf["port"];
	return attr.asInt();
}
int getChildPort(string buf, int pos) {
	Json::Value array;
	Json::Value port;
	Json::Reader reader;
	reader.parse(buf, array);
	port = array[pos];
	return port.asInt();
}
int getChildNum(string buf) {
	Json::Value array;
	Json::Reader reader;
	reader.parse(buf, array);
	return array.size();
}

void error_handling(string msg) {
	cout << msg << endl;
	exit(1);
}

