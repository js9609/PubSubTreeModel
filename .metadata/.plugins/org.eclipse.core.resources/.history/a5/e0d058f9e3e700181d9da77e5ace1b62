/*
 * Subscriber.cpp
 *
 *  Created on: Nov 14, 2018
 *      Author: jinbro
 */
#include <iostream>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/epoll.h>
#include <netinet/in.h>
#include "json/json.h"
#include <string>
#include <string.h>
#include <vector>

using namespace std;
//함수 정의
void error_handling(string msg);
//전역변수 정의
#define EPOLL_SIZE 256
#define BUF_SIZE 100

int main(int argc, char *argv[])
{

	Json::Value info;
	string str;
	cout << "Write Attr" << endl;
	cin >> str;
	info["attr"] = str;
	Json::FastWriter writer;


    struct epoll_event *ep_events;
    struct epoll_event event;
    int epfd, event_cnt;

	string attr = writer.write(info);
	cout << attr << endl;
	const char *buf= attr.c_str();
    int str_len;
    int main_serv_sock, my_serv_sock;;

    struct sockaddr_in main_serv_addr;
    struct sockaddr_in my_serv_addr;
    socklen_t addr_size;

    if(argc!=3) {
		printf("Usage : %s <IP> <port>\n", argv[0]);
		exit(1);
	 }

    //Create Epoll
    epfd=epoll_create(EPOLL_SIZE);
	ep_events=malloc(sizeof(struct epoll_event)*EPOLL_SIZE);


    //For Connection To the Main Server - Initializing
    main_serv_sock = socket(PF_INET, SOCK_STREAM, 0);
    memset(&main_serv_addr, 0, sizeof(main_serv_addr));
	main_serv_addr.sin_family=AF_INET;
	main_serv_addr.sin_addr.s_addr=inet_addr(argv[1]);
	main_serv_addr.sin_port=htons(atoi(argv[2]));


	event.events=EPOLLIN;
	    event.data.fd=main_serv_sock;
	    epoll_ctl(epfd, EPOLL_CTL_ADD, main_serv_sock, &event);

    //Connect to the main Server
    if(connect(main_serv_sock, (struct sockaddr*)&main_serv_addr, sizeof(main_serv_addr))==-1)
		error_handling("connect() error!");
    str_len = write(main_serv_sock, buf, BUF_SIZE );



    close(main_serv_sock);
    return 0;
}


void error_handling(string msg)
{
	cout << msg << endl;
	exit(1);
}





